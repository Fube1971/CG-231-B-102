<!DOCTYPE html>
<html>
    <head>
        <title>Titulo</title>
        <style>
            html, body { margin: 0; padding: 0; overflow: hidden; }
            #text {
                position: absolute;
                padding: 10px;
                width: 100%;
                text-align: center;
                color: #FFFFFF;
            }
        </style>
    </head>
    <body>
        <div id="text">El mejor cubito<br/>
            Cubo<br/>
            ayudaaa<br/>
        </div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r94/three.min.js"></script>
    <script>

   /* function cuadradogeometry(origen,lado,color){ //CUADADRADO

        Geocuadrado1=new THREE.Geometry(); //objeto
        var vertices = [origen, 
                        [origen[0],origen[1]+lado,origen[2]],
                        [origen[0]+lado,origen[1]+lado,origen[2]], 
                        [origen[0]+lado,origen[1],origen[2]], 
                        origen]; //Array 
        var largoVertice = vertices.length;//ver tamaño y ayuda al for a que se repita esa n veces 
        for (i = 0; i < largoVertice; i++) {
            x = vertices[i][0];
            y = vertices[i][1];
            z = vertices[i][2];
            vector = new THREE.Vector3(x, y, z);
            Geocuadrado1.vertices.push(vector); 
         }
         
    Cuadrado99 = new THREE.Line(Geocuadrado1,color);

        return Cuadrado99;
    } */

    function cubo(posini, lado, material)
    {
        GeoCuadrado=new THREE.Geometry(); //objeto
        var vertices = [[0,0,0], 
                        [0,lado,0], 
                        [lado,lado,0], 
                        [lado,0,0], 
                        [0,0,0]]; //Array 
        var largoVertice = vertices.length;//ver tamaño y ayuda al for a que se repita esa n veces 
        for (i = 0; i < largoVertice; i++) {
            x = vertices[i][0];
            y = vertices[i][1];
            z = vertices[i][2];
            vector = new THREE.Vector3(x, y, z);
            GeoCuadrado.vertices.push(vector); //push objeto al arreglo vertices[]
        }
        //Cara 2 en z
        GeoCuadrado2=new THREE.Geometry(); //objeto
        var vertices = [[0,0,0], 
                        [0,lado,0], 
                        [lado,lado,0], 
                        [lado,0,0], 
                        [0,0,0]]; //Array 
        var largoVertice = vertices.length;//ver tamaño y ayuda al for a que se repita esa n veces 
        for (i = 0; i < largoVertice; i++) {
            x = vertices[i][0];
            y = vertices[i][1];
            z = vertices[i][2];
            vector = new THREE.Vector3(x, y, z);
            GeoCuadrado2.vertices.push(vector); //push objeto al arreglo vertices[]
        }
        //Linea 1
        GeoLinea1=new THREE.Geometry(); //objeto
        var vertices = [[0,0,0], 
                        [0,0,lado]]; //Array 
        var largoVertice = vertices.length;//ver tamaño y ayuda al for a que se repita esa n veces 
        for (i = 0; i < largoVertice; i++) {
            x = vertices[i][0];
            y = vertices[i][1];
            z = vertices[i][2];
            vector = new THREE.Vector3(x, y, z);
            GeoLinea1.vertices.push(vector); //push objeto al arreglo vertices[]
        }
        //Linea 2
        GeoLinea2=new THREE.Geometry(); //objeto
        var vertices = [[0,lado,lado], 
                        [0,lado,0]]; //Array 
        var largoVertice = vertices.length;//ver tamaño y ayuda al for a que se repita esa n veces 
        for (i = 0; i < largoVertice; i++) {
            x = vertices[i][0];
            y = vertices[i][1];
            z = vertices[i][2];
            vector = new THREE.Vector3(x, y, z);
            GeoLinea2.vertices.push(vector); //push objeto al arreglo vertices[]
        }
        //Linea 3
        GeoLinea3=new THREE.Geometry(); //objeto
        var vertices = [[lado,lado,lado], 
                        [lado,lado,0]]; //Array 
        var largoVertice = vertices.length;//ver tamaño y ayuda al for a que se repita esa n veces 
        for (i = 0; i < largoVertice; i++) {
            x = vertices[i][0];
            y = vertices[i][1];
            z = vertices[i][2];
            vector = new THREE.Vector3(x, y, z);
            GeoLinea3.vertices.push(vector); //push objeto al arreglo vertices[]
        }
        //Linea 4
        GeoLinea4=new THREE.Geometry(); //objeto
        var vertices = [[lado,0,lado], 
                        [lado,0,0]]; //Array 
        var largoVertice = vertices.length;//ver tamaño y ayuda al for a que se repita esa n veces 
        for (i = 0; i < largoVertice; i++) {
            x = vertices[i][0];
            y = vertices[i][1];
            z = vertices[i][2];
            vector = new THREE.Vector3(x, y, z);
            GeoLinea4.vertices.push(vector); //push objeto al arreglo vertices[]
        }
        //define los cuadrados con color y vertices con lineas osea los une a los vectorers de vertices
        Cuadrado = new THREE.Line(GeoCuadrado,material);
        
        Cuadrado2 = new THREE.Line(GeoCuadrado2,material); 
        this.getCuadrado2= function(){
      
        Linea1 = new THREE.Line(GeoLinea1,material);
        
        Linea2 = new THREE.Line(GeoLinea2,material);
       
        Linea3 = new THREE.Line(GeoLinea3,material);
       
        Linea4 = new THREE.Line(GeoLinea4,material);
       
    
        // Matriz de Traslación cubo
        var matrizT = new THREE.Matrix4(); // se llena la ultima columna 
        matrizT.set(1, 0, 0, 0,
                    0, 1, 0, 0,
                    0, 0, 1, lado,
                    0, 0, 0, 1);

                Cuadrado2.applyMatrix(matrizT);

       ///////////////****************************************** SE HACE CUBITO
       //DESPUES SE LLEBA A LA POSINI
        var matrizT = new THREE.Matrix4(); // se llena la ultima columna 
        matrizT.set(1, 0, 0, posini[0]-(lado-2),
                    0, 1, 0, posini[1]-(lado-2),
                    0, 0, 1, posini[1]-(lado-2),
                    0, 0, 0, 1);

                Cuadrado.applyMatrix(matrizT);
        
        //Cara 2
        var matrizT = new THREE.Matrix4(); // se llena la ultima columna 
        matrizT.set(1, 0, 0, posini[0]+(lado-2),
                    0, 1, 0, posini[1]+(lado-2),
                    0, 0, 1, posini[2]+(lado-2),
                    0, 0, 0, 1);

                Cuadrado2.applyMatrix(matrizT);
        //Linea 1
        var matrizT = new THREE.Matrix4(); // se llena la ultima columna 
        matrizT.set(1, 0, 0, posini[0]-(lado-2),
                    0, 1, 0, posini[1]-(lado-2),
                    0, 0, 1, posini[2]-(lado/2),
                    0, 0, 0, 1);

                Linea1.applyMatrix(matrizT);

        //Linea 2
        var matrizT = new THREE.Matrix4(); // se llena la ultima columna 
        matrizT.set(1, 0, 0, posini[0]-(lado-2),
                    0, 1, 0, posini[1]+(lado-2),
                    0, 0, 1, posini[2]+(lado-2),
                    0, 0, 0, 1);

                Linea2.applyMatrix(matrizT); 
        
        //Linea 3
        var matrizT = new THREE.Matrix4(); // se llena la ultima columna 
        matrizT.set(1, 0, 0, posini[0]-(lado-2),
                    0, 1, 0, posini[1]-(lado-2),
                    0, 0, 1, posini[2]-(lado-2),
                    0, 0, 0, 1);

                Linea3.applyMatrix(matrizT); 
        
         //Linea 4
         var matrizT = new THREE.Matrix4(); // se llena la ultima columna 
        matrizT.set(1, 0, 0, posini[0]-(lado-2),
                    0, 1, 0, posini[1]-(lado-2),
                    0, 0, 1, posini[2]-(lado-2),
                    0, 0, 0, 1);

                Linea4.applyMatrix(matrizT); 
        
        
        scene.add(Cuadrado);
        scene.add(Cuadrado2);
        scene.add(Linea1);
        scene.add(Linea2);
        scene.add(Linea3);
        scene.add(Linea4);
    }
    
   
    /*function cubeGeometry(origen,lado, color){ // CUBO des esquina
        //Cara 1
        GeoCuadrado=new THREE.Geometry(); //objeto
        var vertices = [origen, 
                        [origen[0],origen[1]+lado,origen[2]],
                        [origen[0]+lado,origen[1]+lado,origen[2]], 
                        [origen[0]+lado,origen[1],origen[2]], 
                        origen]; //Array 
        var largoVertice = vertices.length;//ver tamaño y ayuda al for a que se repita esa n veces 
        for (i = 0; i < largoVertice; i++) {
            x = vertices[i][0];
            y = vertices[i][1];
            z = vertices[i][2];
            vector = new THREE.Vector3(x, y, z);
            GeoCuadrado.vertices.push(vector); //push objeto al arreglo vertices[]
        }
        //Cara 2 en z
        GeoCuadrado2=new THREE.Geometry(); //objeto
        var vertices = [origen, 
                        [origen[0],origen[1]+lado,origen[2]],
                        [origen[0]+lado,origen[1]+lado,origen[2]], 
                        [origen[0]+lado,origen[1],origen[2]], 
                        origen]; //Array 
        var largoVertice = vertices.length;//ver tamaño y ayuda al for a que se repita esa n veces 
        for (i = 0; i < largoVertice; i++) {
            x = vertices[i][0];
            y = vertices[i][1];
            z = vertices[i][2];
            vector = new THREE.Vector3(x, y, z);
            GeoCuadrado2.vertices.push(vector); //push objeto al arreglo vertices[]
        }
        //Linea 1
        GeoLinea1=new THREE.Geometry(); //objeto
        var vertices = [origen, 
                        [origen[0]+lado,origen[1],origen[2]+lado]]; //Array 
        var largoVertice = vertices.length;//ver tamaño y ayuda al for a que se repita esa n veces 
        for (i = 0; i < largoVertice; i++) {
            x = vertices[i][0];
            y = vertices[i][1];
            z = vertices[i][2];
            vector = new THREE.Vector3(x, y, z);
            GeoLinea1.vertices.push(vector); //push objeto al arreglo vertices[]
        }
        //Linea 2
        GeoLinea2=new THREE.Geometry(); //objeto
        var vertices = [[origen[0],origen[1]+lado,origen[2]+lado], 
                        [origen[0],origen[1]+lado,origen[2]]]; //Array 
        var largoVertice = vertices.length;//ver tamaño y ayuda al for a que se repita esa n veces 
        for (i = 0; i < largoVertice; i++) {
            x = vertices[i][0];
            y = vertices[i][1];
            z = vertices[i][2];
            vector = new THREE.Vector3(x, y, z);
            GeoLinea2.vertices.push(vector); //push objeto al arreglo vertices[]
            GeoLinea2.vertices.push(vector); //push objeto al arreglo vertices[]
        }
        //Linea 3
        GeoLinea3=new THREE.Geometry(); //objeto
        var vertices = [[origen[0]+lado,origen[1]+lado,origen[2]+lado], 
                        [origen[0]+lado,origen[1]+lado,origen[2]]]; //Array 
        var largoVertice = vertices.length;//ver tamaño y ayuda al for a que se repita esa n veces 
        for (i = 0; i < largoVertice; i++) {
            x = vertices[i][0];
            y = vertices[i][1];
            z = vertices[i][2];
            vector = new THREE.Vector3(x, y, z);
            GeoLinea3.vertices.push(vector); //push objeto al arreglo vertices[]
        }
        //Linea 4
        GeoLinea4=new THREE.Geometry(); //objeto
        var vertices = [[origen[0]+lado,origen[1],origen[2]+lado], 
                        [origen[0]+lado,origen[1],origen[2]]]; //Array 
        var largoVertice = vertices.length;//ver tamaño y ayuda al for a que se repita esa n veces 
        for (i = 0; i < largoVertice; i++) {
            x = vertices[i][0];
            y = vertices[i][1];
            z = vertices[i][2];
            vector = new THREE.Vector3(x, y, z);
            GeoLinea4.vertices.push(vector); //push objeto al arreglo vertices[]
        }
        //define los cuadrados con color y vertices con lineas osea los une a los vectorers de vertices
        Cuadrado = new THREE.Line(GeoCuadrado,color);
        Cuadrado2 = new THREE.Line(GeoCuadrado2,color); 
        Linea1 = new THREE.Line(GeoLinea1,color);
        Linea2 = new THREE.Line(GeoLinea2,color);
        Linea3 = new THREE.Line(GeoLinea3,color);
        Linea4 = new THREE.Line(GeoLinea4,color);
    
        // Matriz de Traslación
        var matrizT = new THREE.Matrix4(); // se llena la ultima columna 
        matrizT.set(1, 0, 0, 0,
                    0, 1, 0, 0,
                    0, 0, 1, lado,
                    0, 0, 0, 1);

                Cuadrado2.applyMatrix(matrizT);
        //Agregar a Escena 
        scene.add(Cuadrado);
        scene.add(Cuadrado2);
        scene.add(Linea1);
        scene.add(Linea2);
        scene.add(Linea3);
        scene.add(Linea4);

    }
    
    function cubeGeometry2(lado, color){
        //Cara 1
        GeoCuadrado=new THREE.Geometry(); //objeto
        var vertices = [[0,0,0], 
                        [0,lado,0], 
                        [lado,lado,0], 
                        [lado,0,0], 
                        [0,0,0]]; //Array 
        var largoVertice = vertices.length;//ver tamaño y ayuda al for a que se repita esa n veces 
        for (i = 0; i < largoVertice; i++) {
            x = vertices[i][0];
            y = vertices[i][1];
            z = vertices[i][2];
            vector = new THREE.Vector3(x, y, z);
            GeoCuadrado.vertices.push(vector); //push objeto al arreglo vertices[]
        }
        //Cara 2 en z
        GeoCuadrado2=new THREE.Geometry(); //objeto
        var vertices = [[0,0,0], 
                        [0,lado,0], 
                        [lado,lado,0], 
                        [lado,0,0], 
                        [0,0,0]]; //Array 
        var largoVertice = vertices.length;//ver tamaño y ayuda al for a que se repita esa n veces 
        for (i = 0; i < largoVertice; i++) {
            x = vertices[i][0];
            y = vertices[i][1];
            z = vertices[i][2];
            vector = new THREE.Vector3(x, y, z);
            GeoCuadrado2.vertices.push(vector); //push objeto al arreglo vertices[]
        }
        //Linea 1
        GeoLinea1=new THREE.Geometry(); //objeto
        var vertices = [[0,0,0], 
                        [0,0,lado]]; //Array 
        var largoVertice = vertices.length;//ver tamaño y ayuda al for a que se repita esa n veces 
        for (i = 0; i < largoVertice; i++) {
            x = vertices[i][0];
            y = vertices[i][1];
            z = vertices[i][2];
            vector = new THREE.Vector3(x, y, z);
            GeoLinea1.vertices.push(vector); //push objeto al arreglo vertices[]
        }
        //Linea 2
        GeoLinea2=new THREE.Geometry(); //objeto
        var vertices = [[0,lado,lado], 
                        [0,lado,0]]; //Array 
        var largoVertice = vertices.length;//ver tamaño y ayuda al for a que se repita esa n veces 
        for (i = 0; i < largoVertice; i++) {
            x = vertices[i][0];
            y = vertices[i][1];
            z = vertices[i][2];
            vector = new THREE.Vector3(x, y, z);
            GeoLinea2.vertices.push(vector); //push objeto al arreglo vertices[]
        }
        //Linea 3
        GeoLinea3=new THREE.Geometry(); //objeto
        var vertices = [[lado,lado,lado], 
                        [lado,lado,0]]; //Array 
        var largoVertice = vertices.length;//ver tamaño y ayuda al for a que se repita esa n veces 
        for (i = 0; i < largoVertice; i++) {
            x = vertices[i][0];
            y = vertices[i][1];
            z = vertices[i][2];
            vector = new THREE.Vector3(x, y, z);
            GeoLinea3.vertices.push(vector); //push objeto al arreglo vertices[]
        }
        //Linea 4
        GeoLinea4=new THREE.Geometry(); //objeto
        var vertices = [[lado,0,lado], 
                        [lado,0,0]]; //Array 
        var largoVertice = vertices.length;//ver tamaño y ayuda al for a que se repita esa n veces 
        for (i = 0; i < largoVertice; i++) {
            x = vertices[i][0];
            y = vertices[i][1];
            z = vertices[i][2];
            vector = new THREE.Vector3(x, y, z);
            GeoLinea4.vertices.push(vector); //push objeto al arreglo vertices[]
        }
        //define los cuadrados con color y vertices con lineas osea los une a los vectorers de vertices
        Cuadrado = new THREE.Line(GeoCuadrado,color);
        this.getCuadrado= function(){
            return Cuadrado
        }
        Cuadrado2 = new THREE.Line(GeoCuadrado2,color); 
        this.getCuadrado2= function(){
            return Cuadrado2
        }
        Linea1 = new THREE.Line(GeoLinea1,color);
        this.getLinea1= function(){
            return  Linea1
        }
        Linea2 = new THREE.Line(GeoLinea2,color);
        this.getLinea2= function(){
            return Linea2
        }
        Linea3 = new THREE.Line(GeoLinea3,color);
        this.getLinea3= function(){
            return Linea3
        }
        Linea4 = new THREE.Line(GeoLinea4,color);
        this.getLinea4= function(){
            return Linea4
        }
    
        // Matriz de Traslación
        var matrizT = new THREE.Matrix4(); // se llena la ultima columna 
        matrizT.set(1, 0, 0, 0,
                    0, 1, 0, 0,
                    0, 0, 1, lado,
                    0, 0, 0, 1);

                Cuadrado2.applyMatrix(matrizT);
       
    }*/
    function TranslacionCubo(x, y,z){ //-----------------------------------------
        cubeGeometry2(35, Material2);
        //Cara 1
        var matrizT = new THREE.Matrix4(); // se llena la ultima columna 
        matrizT.set(1, 0, 0, x,
                    0, 1, 0, y,
                    0, 0, 1, z,
                    0, 0, 0, 1);

                getCuadrado().applyMatrix(matrizT);
        
        //Cara 2
        var matrizT = new THREE.Matrix4(); // se llena la ultima columna 
        matrizT.set(1, 0, 0, x,
                    0, 1, 0, y,
                    0, 0, 1, z,
                    0, 0, 0, 1);

                getCuadrado2().applyMatrix(matrizT);
        //Linea 1
        var matrizT = new THREE.Matrix4(); // se llena la ultima columna 
        matrizT.set(1, 0, 0, x,
                    0, 1, 0, y,
                    0, 0, 1, z,
                    0, 0, 0, 1);

                getLinea1().applyMatrix(matrizT);

        //Linea 2
        var matrizT = new THREE.Matrix4(); // se llena la ultima columna 
        matrizT.set(1, 0, 0, x,
                    0, 1, 0, y,
                    0, 0, 1, z,
                    0, 0, 0, 1);

                getLinea2().applyMatrix(matrizT); 
        
        //Linea 3
        var matrizT = new THREE.Matrix4(); // se llena la ultima columna 
        matrizT.set(1, 0, 0, x,
                    0, 1, 0, y,
                    0, 0, 1, z,
                    0, 0, 0, 1);

                getLinea3().applyMatrix(matrizT); 
        
         //Linea 4
         var matrizT = new THREE.Matrix4(); // se llena la ultima columna 
        matrizT.set(1, 0, 0, x,
                    0, 1, 0, y,
                    0, 0, 1, z,
                    0, 0, 0, 1);

                getLinea4().applyMatrix(matrizT); 
        
        
        scene.add(getCuadrado());
        scene.add(getCuadrado2());
        scene.add(getLinea1());
        scene.add(getLinea2());
        scene.add(getLinea3());
        scene.add(getLinea4());
    }

    function escala(x,y,z, lado){
        cubeGeometry2(35, Material2);
        //Cara 1
        var matrizS = new THREE.Matrix4(); // se ve un valor en la [0][0] en porcentaje 5= 500%
        matrizS.set(x, 0, 0, 0,
                    0, y, 0, 0,
                    0, 0, z, 0,
                    0, 0, 0, 1);

                    getCuadrado().applyMatrix(matrizS);
        
        //Cara 2
        var matrizS = new THREE.Matrix4(); // se ve un valor en la [0][0] en porcentaje 5= 500%
        matrizS.set(x, 0, 0, 0,
                    0, y, 0, 0,
                    0, 0, z, 0,
                    0, 0, 0, 1);

                    getCuadrado2().applyMatrix(matrizS);

        //Linea1
        var matrizS = new THREE.Matrix4(); // se ve un valor en la [0][0] en porcentaje 5= 500%
        matrizS.set(x, 0, 0, 0,
                    0, y, 0, 0,
                    0, 0, z, 0,
                    0, 0, 0, 1);

                    getLinea1().applyMatrix(matrizS);
                
        //Linea2
        var matrizS = new THREE.Matrix4(); // se ve un valor en la [0][0] en porcentaje 5= 500%
        matrizS.set(x, 0, 0, 0,
                    0, y, 0, 0,
                    0, 0, z, 0,
                    0, 0, 0, 1);

                    getLinea2().applyMatrix(matrizS);

        //Linea3
        var matrizS = new THREE.Matrix4(); // se ve un valor en la [0][0] en porcentaje 5= 500%
        matrizS.set(x, 0, 0, 0,
                    0, y, 0, 0,
                    0, 0, z, 0,
                    0, 0, 0, 1);

                    getLinea3().applyMatrix(matrizS);

        //Linea4
        var matrizS = new THREE.Matrix4(); // se ve un valor en la [0][0] en porcentaje 5= 500%
        matrizS.set(x, 0, 0, 0,
                    0, y, 0, 0,
                    0, 0, z, 0,
                    0, 0, 0, 1);

                    getLinea4().applyMatrix(matrizS);
                    
        //Agregar a escena la transformacion
        scene.add(getCuadrado());
        scene.add(getCuadrado2());
        scene.add(getLinea1());
        scene.add(getLinea2());
        scene.add(getLinea3());
        scene.add(getLinea4());
    }

    //Con Posicion 
    function escalageneral(x,y,z,Matriz){ //Escala general
        
        //Cara 1
        var matrizSg = new THREE.Matrix4(); 
        matrizSg.set(x, 0, 0, 0,
                    0, y, 0, 0,
                    0, 0, z, 0,
                    0, 0, 0, 1);

            Matriz.applyMatrix( matrizSg);        
            
        scene.add(Matriz);
        }

     function rotacionx(angle,Matriz){
    
        var matrizRx = new THREE.Matrix4();
        var alpha = angle;
		var cs = Math.cos(alpha);
		var ss = Math.sin(alpha);

		matrizRx.set(1,  0, 0, 0, //rotacion en x 
        		     0,  cs, -ss, 0, 
				     0, ss, cs, 0,
				     0, 0, 0, 1);	

        Matriz.applyMatrix( matrizRx); 
        scene.add(Matriz);
        }

    function rotaciony(angle, Matriz){
    
        var matrizRy = new THREE.Matrix4();
        var alpha = angle;
		var cs = Math.cos(alpha);
		var ss = Math.sin(alpha);

		matrizRy.set(cs,  0, ss, 0, //rotacion en y 
        		     0,  1, 0, 0, 
				   -ss, 0, cs, 0,
				     0, 0, 0, 1);	
        Matriz.applyMatrix(matrizRy);
        scene.add(Matriz);
    }


    function rotacionz(angle, Matriz){
    
        var matrizRz = new THREE.Matrix4();
        var alpha = angle;
		var cs = Math.cos(alpha);
		var ss = Math.sin(alpha);

		matrizRz.set(cs,  -ss, 0, 0, //rotacion en z 
        		     ss,  cs, 0, 0, 
				       0, 0, 1, 0,
				     0, 0, 0, 1);	
        Matriz.applyMatrix(matrizRz);
        scene.add(Matriz);
    }

    function Translaciongeneral(x, y,z,Matriz){ 

        //Cara 1
        var matrizTg = new THREE.Matrix4();  // traslacion general
        matrizTg.set(1, 0, 0, x,
                    0, 1, 0, y,
                    0, 0, 1, z,
                    0, 0, 0, 1);
        Matriz.applyMatrix(matrizTg); 
        scene.add(Matriz);
    }


    function init() { //FUNCION QUE EJECUTA  

        // Escena
        scene = new THREE.Scene();
        camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000);    
        renderer = new THREE.WebGLRenderer();
        renderer.setClearColor(0x000000, 1.0);
        renderer.setSize(window.innerWidth, window.innerHeight);

        var size = 700;
        var arrowSize = 40;
        var divisions = 20; //divisiones del piso
        var origin = new THREE.Vector3( 0, 0, 0 );
        var x = new THREE.Vector3( 1, 0, 0 );//vectores de posicion 
        var y = new THREE.Vector3( 0, 1, 0 );
        var z = new THREE.Vector3( 0, 0, 1 );
        var color2 = new THREE.Color( 0x333333 );  /// 0x333333
        var colorR = new THREE.Color( 0xAA0000 ); // para crear color 
        var colorG = new THREE.Color( 0x00AA00 );
        var colorB = new THREE.Color( 0x0000AA );

        //Crear la Rejilla 
        var gridHelperXZ = new THREE.GridHelper( size, divisions, color2, color2); // tamaños division color  plano horizontal 

        //Flechas
        var arrowX = new THREE.ArrowHelper( x, origin, arrowSize, colorR ); //objetos permite hacer flechitas
                                            //posicion , origen, tamaño, color )
        var arrowY = new THREE.ArrowHelper( y, origin, arrowSize, colorG );
        var arrowZ = new THREE.ArrowHelper( z, origin, arrowSize, colorB ); // pone felchas a las lineas 
			
        //Cámara
        camera.position.x = 200;
        camera.position.y = 100;
        camera.position.z = 500;
        camera.lookAt(scene.position); // enfoque a la posicion de la escena 

        Material1=new THREE.ParticleBasicMaterial({color:0xFF0000});//asigna el matrial 
        Material2=new THREE.ParticleBasicMaterial({color:0x00ff00});

        cubo([0,0,0],10,Material1);

        /*//Creacion del Cubo
        cubeGeometry(35, Material1);
        TranslacionCubo(60, 20,0);
        escala(2,5,3);*/

        //Probación
        //escalageneral(1,2,1,cuadradogeometry([30,30,30],40, Material1,));
        //rotacionx(50,cuadradogeometry([0,0,0],40, Material1,));
        //rotaciony(50,cuadradogeometry([0,0,0],40, Material1,));
        //rotacionz(50,cuadradogeometry([0,0,0],40, Material1,));
        //Translaciongeneral(30,30,30,cuadradogeometry([0,0,0],40, Material1,));


       /*
        // Matriz de EscalaS
        var matrizS = new THREE.Matrix4(); // se ve un valor en la [0][0] en porcentaje 5= 500%
        matrizS.set(5, 0, 0, 0,
                    0, 1, 0, 0,
                    0, 0, 1, 0,
                    0, 0, 0, 1);

                Cuadrado2.applyMatrix(matrizS);

        // Matriz de Rotación 
        var matrizR = new THREE.Matrix4();
        var alpha = 30;
		var cs = Math.cos(alpha);
		var ss = Math.sin(alpha);

		matrizR.set(cs,  0, ss, 0, //rotacion en y 
        		     0,  1, 0, 0, 
				   -ss, 0, cs, 0,
				     0, 0, 0, 1);	

                Cuadrado2.applyMatrix(matrizR);
        */
        // En el documento HTML
        document.body.appendChild(renderer.domElement); //Agrega el render al document 

        // Agregar elementos al escenario***
        scene.add(gridHelperXZ);
	    scene.add(arrowX);	
		scene.add(arrowY);	
		scene.add(arrowZ);
        
    

        renderer.render(scene, camera);
    }

    init();  // otra forma: window.onload = init;

            </script>
            </body>
    </html>